var documenterSearchIndex = {"docs":
[{"location":"#DecisionMakingUtils.jl","page":"DecisionMakingUtils.jl","title":"DecisionMakingUtils.jl","text":"","category":"section"},{"location":"","page":"DecisionMakingUtils.jl","title":"DecisionMakingUtils.jl","text":"Documentation for DecisionMakingUtils.jl","category":"page"},{"location":"","page":"DecisionMakingUtils.jl","title":"DecisionMakingUtils.jl","text":"Modules = [DecisionMakingUtils]","category":"page"},{"location":"#DecisionMakingUtils.FourierBasis","page":"DecisionMakingUtils.jl","title":"DecisionMakingUtils.FourierBasis","text":"FourierBasis([::Type,] num_inputs::Int, dorder::Int, iorder::Int [, full::Bool=false])\n\nCreates a struct to generate fourier features up to a given order. Both coupled fourier features, e.g.,  cos(π(3x₁ + 2x₂)) and uncoupled features, cos(πx₁) cos(π2x₁)  can be generated with this basis function.  The dorder parameter controls order for the coupling features. The number of coupled features generated, (textnum_inputs+1)^textdorder,  grows exponentially with dorder, so it is not reccomended for use with high deminsional vectors. The iorder parameter controls the order of the independent features generated. The full parameter determines if both  sin and cos features are generated, if false only cos features are generated. \n\nSee also: FourierBasisBuffer\n\nExamples\n\njulia> f = FourierBasis(2, 1, 2);\n\njulia> x = [0.0, 0.5];\n\njulia> feats = f(x)\n6-element Array{Float64,1}:\n  1.0\n  6.123233995736766e-17\n  1.0\n  6.123233995736766e-17\n  1.0\n -1.0\n\n\n\n\n\n\n","category":"type"},{"location":"#DecisionMakingUtils.FourierBasisBuffer","page":"DecisionMakingUtils.jl","title":"DecisionMakingUtils.FourierBasisBuffer","text":"FourierBasisBuffer(ϕ::FourierBasis)\n\nCreates preallocated buffers for a fourier basis to use to avoid making allocations on every call of the basis. \n\nSee also: FourierBasis\n\nExamples\n\n```jldoctest julia> f = FourierBasis(2, 1, 2);\n\njulia> buff = FourierBasisBuffer(f);\n\njulia> x = [0.0, 0.5];\n\njulia> feats = f(buff, x) 6-element Array{Float64,1}:   1.0   6.123233995736766e-17   1.0   6.123233995736766e-17   1.0  -1.0\n\n\n\n\n\n","category":"type"},{"location":"#DecisionMakingUtils.GaussianNormalization","page":"DecisionMakingUtils.jl","title":"DecisionMakingUtils.GaussianNormalization","text":"GaussianNormalization(num_features::Int[, weight])\n\nThis is a functor that normalizes each element of a vector to be centered around a mean and have a variance of one.  OnlineStats.KahanVariance is used for computing and tracking the mean and variance. Likewise any OnlineStats.Weight can be used to weigh each sample. \n\nSee also: ZeroOneNormalization, PosNegNormalization\n\nExamples\n\njulia> nrm = GaussianNormalization(2, 1e-4);\n\njulia> x = [1.0, 0.0];\n\njulia> feats = nrm(x)\n2-element Array{Float64,1}:\n 1.0\n 0.0\n\njulia> y = zero(x);  # create buffer to prevent allocations\n\njulia> feats = nrm(y, x);  # no allocation return\n\njulia> feats = nrm(y, x, fit=true)  # update mean and variance using x\n2-element Array{Float64,1}:\n 0.9999\n 0.0\n\n\n\n\n\n\n","category":"type"},{"location":"#DecisionMakingUtils.PosNegNormalization","page":"DecisionMakingUtils.jl","title":"DecisionMakingUtils.PosNegNormalization","text":"PosNegNormalization(low::T, high::T)\n\nThis is a functor that normalizes a vector to be in the range [-1,1]. Initial upper and lower bounds for each element are needed. \n\nSee also: ZeroOneNormalization, GaussianNormalization\n\nExamples\n\njulia> low = [0.0, -1.0];\n\njulia> high = [3.0, 0.5];\n\njulia> nrm = PosNegNormalization(low, high);\n\njulia> x = [1.0, 0.0];\n\njulia> feats = nrm(x)\n2-element Array{Float64,1}:\n -0.33333333333333337\n  0.33333333333333326\n\njulia> y = zero(x);  # create buffer to prevent allocations\n\njulia> feats = nrm(y, x);  # no allocation return\n\njulia> feats = nrm(y, x, fit=true);  # update upper and lower bounds if x is outside the range\n\n\n\n\n\n\n","category":"type"},{"location":"#DecisionMakingUtils.ZeroOneNormalization","page":"DecisionMakingUtils.jl","title":"DecisionMakingUtils.ZeroOneNormalization","text":"ZeroOneNormalization(low::T, high::T)\n\nThis is a functor that normalizes a vector to be in the range [0,1]. Initial upper and lower bounds for each element are needed. \n\nSee also: PosNegNormalization, GaussianNormalization\n\nExamples\n\njulia> low = [0.0, -1.0];\n\njulia> high = [3.0, 0.5];\n\njulia> nrm = ZeroOneNormalization(low, high);\n\njulia> x = [1.0, 0.0];\n\njulia> feats = nrm(x)\n2-element Array{Float64,1}:\n 0.3333333333333333\n 0.6666666666666666\n\njulia> y = zero(x);  # create buffer to prevent allocations\n\njulia> feats = nrm(y, x);  # no allocation return\n\njulia> feats = nrm(y, x, fit=true);  # update upper and lower bounds if x is outside the range\n\n\n\n\n\n\n","category":"type"},{"location":"#Base.length-Union{Tuple{FourierBasis{T,false}}, Tuple{T}} where T","page":"DecisionMakingUtils.jl","title":"Base.length","text":"length(ϕ::FourierBasis)\n\nReturns the number of feautes produced by the Fourier basis. \n\n\n\n\n\n","category":"method"}]
}
